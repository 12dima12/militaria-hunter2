<analysis>
The AI engineer successfully built a Telegram Article Hunter bot from scratch, iterating through multiple user requests and debugging sessions. Initially, the core bot structure, database models, services, and a  provider were set up. Early challenges included bot startup issues, Telegram API conflicts, and a critical parsing error in the web scraper due to incorrect HTTP header handling and incorrect URL pattern matching. Subsequent phases focused on refining core functionalities: implementing a robust duplicate push prevention system, accurate  and price extraction, enhancing crawling limits to handle 50,000+ items, adding a public  command for global data wipe, fixing scheduler issues to ensure polling continuity, and introducing a comprehensive  command with health status and a one-tap diagnosis flow. The current task involves refactoring the  command to delete a user's specific keywords and associated data, instead of performing a global wipe, with cascading deletes and confirmation.
</analysis>

<product_requirements>
The objective is to build a production-ready Telegram bot that monitors militaria321.com for new listings matching user keywords and sends immediate push notifications.
**Core Requirements:**
*   **Database:** MongoDB.
*   **Timezone:** Always display in Germany time (Europe/Berlin).
*   **Grace window:** 60 minutes for items without .
*   **Poll interval:** Fixed 60 seconds per keyword.
*   **Inline buttons:** √ñffnen (open link) and Keyword l√∂schen for notifications.
*   **HTTP headers:** Realistic headers including  and German .
*   **User commands (German):**
    *   : Create subscription, run full baseline crawl (no notifications), seed , set , start polling.
    *   : Run full re-scan, upsert listings, refresh seen set (no notifications).
    *   : Remove subscription and scheduled job.
*   **Notification Content:** German texts, formal tone, including: Suchbegriff, Titel, Preis (German format ‚Äú1.234,56 ‚Ç¨‚Äù), Plattform, Link, Thumbnail, Gefunden (Berlin time), Inseriert am (Berlin time, or ‚Äú/‚Äù).
*   **Newness Logic:** Push only if  (UTC-aware) AND  not in  AND notification insert passes unique-idempotency guard. Grace window for missing .
*   **Militaria321.com Provider:** Understand site structure, crawl all pages, parse items (platform_id, title, URL, price, posted_ts from detail page).
*   **Scheduler:** APScheduler for fixed 60s polling.
*   **Logging:** Structured, privacy-safe for pages, decisions, and poll summaries.
*   **Acceptance Criteria:** Correct command behavior, single notification per new item, proper time/price formatting, unique listings, extensibility for new providers.

**Subsequent Feature Enhancements:**
1.  **Duplicate Pushes & Posted_TS Extraction:**
    *   Ensure no duplicate notifications.
    *   Parse and store  from detail pages (Auktionsstart/Eingestellt).
    *   Use  for new item gating.
    *   Scrape and format price from detail page if missing from search row.
    *   Unique partial index on  for idempotency.
    *   Scheduler guard: , , one job per keyword.
2.  **Crawling Limits (50.000+ items instead of 2000):**
    *   Increase pagination limit to allow crawling significantly more pages.
    *   Optimize crawling for large datasets with progress logging and memory management.
    *   Batch processing for large baseline insertions.
3.  ** Command:**
    *   Public global cleanup of stored products (, , ) with 2-step confirmation.
    *   Do not touch  or .
    *   German UX copy.
4.  ** Command:**
    *   List all active keywords for the current user.
    *   Compute health status per keyword (‚úÖ L√§uft / ‚ö†Ô∏è Warnung / ‚ùå Fehler) with reason.
    *   Show last check times (Berlin) and baseline state.
    *   Inline buttons: üîÑ Jetzt pr√ºfen (one-off quick poll without notifications) and üóëÔ∏è L√∂schen.
    *   Extend  model with telemetry fields (, , , , etc.).
    *   Implement  logic.
5.  **Baseline State Machine & Diagnosis Flow:**
    *   Prevent baseline pending hangs with  transitions (, , , , ) and associated timestamps/counters in  model.
    *   Full-page baseline crawl for  using  detection (not ), dedupe by .
    *   Enhanced  to show health and root-cause based on detailed telemetry.
    *   One-tap diagnosis () to run checks (baseline, scheduler, provider dry-run, DB writes) and return a German report.
    *   Search/Run Telemetry in  for success/exception handling (, , , ).
6.  **Refactor  to delete caller's keywords:**
    *    (no args) should delete *only* the invoking user's keywords and associated , .
    *   Stop relevant APScheduler jobs.
    *   Does not touch global .
    *   Two-step inline button confirmation with German UX.
    *   Keep existing global product wipe under .
</product_requirements>

<key_technical_concepts>
- **Python 3.11+:** Primary language.
- **aiogram:** Telegram Bot API framework for handling messages and callbacks.
- **MongoDB:** NoSQL database for persistence.
- **APScheduler:** Asynchronous task scheduler for polling.
- **httpx:** Async HTTP client for web scraping.
- **BeautifulSoup4:** HTML/XML parser for extracting data from webpages.
- **:** For loading environment variables.
- **:** Python standard library for timezone handling.
- **UUID:** Used for unique IDs instead of MongoDB ObjectIDs.
- **Web Scraping:** Techniques for extracting data from , including custom headers, pagination, and robust parsing.
- **Asynchronous Programming:** Extensive use of .
- **Database Indexing:** Unique partial indexes for idempotency ( collection).
- **State Machines:** Implemented for baseline crawling status ().
- **Dependency Injection:** Services and database managers passed to bot handlers.
</key_technical_concepts>

<code_architecture>
The application is structured into a logical  directory within the  root, separating the backend components into distinct concerns.



**Key Files and Their Importance/Changes:**

-   ****:
    -   **Importance:** Defines the data structures (Pydantic models) for MongoDB collections. Ensures data consistency and validation.
    -   **Changes:** Extended the  model with comprehensive telemetry fields like , , , , , , , , , , , and . Also added  model.
-   ****:
    -   **Importance:** Handles the connection to MongoDB and provides helper methods for database operations across collections.
    -   **Changes:** Fixed initial import issue with . Added  for global data wipe. Added  for efficient updates. Added , , ,  for the  command refactor.
-   ****:
    -   **Importance:** Contains the web scraping logic specific to militaria321.com, responsible for fetching pages, parsing listings, and extracting details.
    -   **Changes:**
        -   Initial parsing logic fixed to correctly identify auction links.
        -   Improved  to handle Brotli compression and realistic headers ().
        -   Added  for consistent item identification.
        -   Enhanced  to fetch  and price from detail pages when not present on search results, using specific German date/price patterns.
        -   Improved  logic for full-page baseline crawling by checking for  parameter in links.
        -   Modified pagination logic to crawl until no next page is found, rather than relying on a  estimate.
        -   Implemented  set for in-run deduplication during crawling.
        -   Added detailed structured logging per page.
        -   Reduced delay between pages for large crawls.
-   ****:
    -   **Importance:** Orchestrates the keyword search process, managing provider calls, newness detection, and data storage.
    -   **Changes:**
        -   Implemented  with  gating and grace window.
        -   Added telemetry updates (, , , ) on success or exception.
        -   Introduced  flag to skip notifications during health checks.
        -   Rewrote  to implement the baseline state machine ( ->  -> //) with detailed error tracking and logging.
        -   Added  function for one-tap diagnosis, including provider probes and status checks.
-   ****:
    -   **Importance:** Formats and sends notifications to Telegram users.
    -   **Changes:** Updated notification message formatting to use German templates, Berlin timezone, and robust price formatting. Ensures unique notifications via database idempotency.
-   ****:
    -   **Importance:** Manages scheduled jobs for polling keywords using APScheduler.
    -   **Changes:**
        -   Added  and  to prevent double polling.
        -   Implemented  to restore all active keyword jobs on bot startup.
        -   Exposed introspection helpers:  and .
        -   Added  for stopping specific keyword jobs.
-   ****:
    -   **Importance:** The main entry point for the Telegram bot, containing command handlers and bot initialization.
    -   **Changes:**
        -   Migrated core bot logic from  for a cleaner implementation.
        -   Integrated  for loading environment variables.
        -   Fixed router attachment issues and double-initialization.
        -   Implemented , ,  commands with correct German responses.
        -   Added  command with 2-step confirmation for global data wipe.
        -   Implemented  command to show keyword health/status, using  and  datetime formatter.
        -   Added  callback to trigger quick polls.
        -   Added  callback for one-tap diagnosis.
        -   Currently being refactored to implement the  command for user-specific keyword deletion.

</code_architecture>

<pending_tasks>
-   Complete the refactoring of the  command. Specifically, finish implementing  in  and integrate the database deletion and job stopping logic into the  callback handler in .
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was tasked with refactoring the  command. The goal is to change its behavior from a global product wipe (which will be moved to ) to deleting only the invoking user's keywords and associated artifacts (, ), while also stopping their respective APScheduler jobs. This new functionality requires a two-step confirmation.

So far, the following actions have been taken:
1.  **Database Helpers Added:**
    *   : Fetches all keyword IDs for a given user.
    *   : Deletes keywords by their IDs.
    *   : Deletes keyword hits by associated keyword IDs.
    *   : Deletes notifications by associated keyword IDs.
    These methods were added to .
2.  **Scheduler Helper Started:** The intention is to add  to  to remove a specific APScheduler job. The last action in the trajectory shows that this task is in progress, with an attempt to add this method.
3.  **Bot Handlers (Planned):** The next step involves implementing the new  and  command handlers in , including the inline confirmation buttons and the logic for calling the new database and scheduler helpers.
</current_work>

<optional_next_step>
Complete the implementation of the  function in .
</optional_next_step>
